name: PR
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

env:
  PR_SLUG: "pr-${{ github.event.pull_request.number }}"

jobs:
  build_and_publish_configuration_packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Install Crossplane CLI
        run: |
          curl -sL "https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh" | XP_VERSION=v2.0.2 sh
          sudo mv crossplane /usr/local/bin

      - name: Build and publish datalab-educates Configuration Package
        run: |
          ORG="${GITHUB_REPOSITORY_OWNER,,}"
          REPO="${GITHUB_REPOSITORY#*/}"; REPO="${REPO,,}"

          cp xrd.yaml educates/xrd.yaml

          crossplane xpkg build \
            --package-root=educates \
            --ignore 'dependencies/*' \
            --ignore 'tests/expected/*,tests/observed/*,tests/*' \
            --package-file educates/datalab-educates.xpkg \
            --verbose

          crossplane xpkg push \
            --package-files=educates/datalab-educates.xpkg \
            "ghcr.io/${ORG}/${REPO}/educates:${PR_SLUG}" \
            --verbose

  educates_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Crossplane CLI
        run: |
          curl -sL "https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh" | XP_VERSION=v2.0.2 sh
          sudo mv crossplane /usr/local/bin

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@main

      - name: Install dyff
        run: |
          brew install dyff

      - name: Run unit tests
        run: |
          set -euo pipefail
          for file in tests/00*-lab.yaml; do
            i=$(basename "$file" | sed -E 's/^00(.+)-lab\.yaml$/\1/')

            crossplane render \
              "tests/00${i}-lab.yaml" \
              educates/composition.yaml \
              educates/dependencies/functions.yaml \
              --observed-resources "educates/tests/observed/00${i}-lab.yaml" \
              --required-resources "educates/tests/environmentconfig.yaml" \
              -x > "educates/tests/00${i}-lab.yaml"

            dyff between \
              "educates/tests/00${i}-lab.yaml" \
              "educates/tests/expected/00${i}-lab.yaml" \
              -s
          done

  educates_e2e_tests:
    runs-on: ubuntu-latest
    needs: build_and_publish_configuration_packages
    permissions:
      packages: write
    env:
      CHAINSAW: /home/runner/.chainsaw/chainsaw
      KUBECTL: /usr/bin/kubectl
      CROSSPLANE_NAMESPACE: crossplane-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Uptest CLI
        run: |
          curl -OL https://github.com/crossplane/uptest/releases/download/v1.4.0/uptest_linux-amd64
          chmod +x uptest_linux-amd64
          sudo mv uptest_linux-amd64 /usr/local/bin/uptest

      - name: Install chainsaw CLI
        uses: kyverno/action-install-chainsaw@v0.2.12
        with:
          release: v0.2.12

      - name: Create kind cluster
        uses: helm/kind-action@v1

      - name: Run e2e tests
        run: |
          # Apply all bucket manifests + all base test cases
          set -euo pipefail
          shopt -s nullglob
          uptest e2e \
            --setup-script educates/tests/e2e.bash \
            tests/00*-lab.yaml

      - name: Delete Configuration Package version (cleanup)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          echo "${GH_TOKEN}" | gh auth login --with-token

          ORG="${GITHUB_REPOSITORY_OWNER}"
          REPO="${GITHUB_REPOSITORY#*/}"
          PKG_NAME="${REPO}/educates"
          PKG_NAME_ENC="${PKG_NAME//\//%2F}"

          # org path first, fallback to user path
          if ! package_id=$(gh api "/orgs/${ORG}/packages/container/${PKG_NAME_ENC}/versions" --jq \
            ".[] | select(.metadata.container.tags | any(. == \"${PR_SLUG}\")) | .id" 2>/dev/null); then
            package_id=$(gh api "/users/${ORG}/packages/container/${PKG_NAME_ENC}/versions" --jq \
              ".[] | select(.metadata.container.tags | any(. == \"${PR_SLUG}\")) | .id")
          fi

          if [ -n "${package_id:-}" ]; then
            gh api --method DELETE --silent "/orgs/${ORG}/packages/container/${PKG_NAME_ENC}/versions/${package_id}" || \
            gh api --method DELETE --silent "/users/${ORG}/packages/container/${PKG_NAME_ENC}/versions/${package_id}" || true
          else
            echo "No package version found for tag ${PR_SLUG}; skipping delete."
          fi
