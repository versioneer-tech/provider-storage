name: PR
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
    - main

env:
  PR_SLUG: "pr-${{ github.event.pull_request.number }}"

jobs:
  build_and_publish_configuration_packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Install Crossplane CLI
        run: |
          curl -sL "https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh" | XP_VERSION=v1.20.0 sh
          sudo mv crossplane /usr/local/bin
      # - name: Build and publish storage-minio Configuration Package
      #   run: |
      #     cp xrd.yaml minio/xrd.yaml
      #     cd minio/
      #     crossplane xpkg build --package-root=. --ignore="examples/*,tests/*,tests/expected/*,tests/observed/*" --verbose
      #     crossplane xpkg push "ghcr.io/versioneer-tech/provider-storage:${PR_SLUG}-minio" --verbose
      - name: Build and publish storage-aws Configuration Package
        run: |
          cp xrd.yaml aws/xrd.yaml
          cd aws/
          crossplane xpkg build --package-root=. --ignore="examples/*,tests/*,tests/expected/*,tests/observed/*" --verbose
          crossplane xpkg push "ghcr.io/versioneer-tech/provider-storage:${PR_SLUG}-aws" --verbose
  minio_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Crossplane CLI
        run: |
          curl -sL "https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh" | XP_VERSION=v1.20.0 sh
          sudo mv crossplane /usr/local/bin
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@main
      - name: Install dyff
        run: |
          brew install dyff
      - name: Run unit tests
        run: |
          cd minio/
          for i in {1..5}; do
            crossplane render tests/00"${i}"-buckets.yaml composition.yaml tests/functions.yaml --observed-resources tests/observed/00"${i}"-buckets.yaml -x > 00"${i}"-buckets.yaml
            dyff between 00"${i}"-buckets.yaml tests/expected/00"${i}"-buckets.yaml -s
          done
  aws_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Crossplane CLI
        run: |
          curl -sL "https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh" | sh
          sudo mv crossplane /usr/local/bin
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@main
      - name: Install dyff
        run: |
          brew install dyff
      - name: Run unit tests
        run: |
          for i in {1..5}; do
            crossplane render "tests/00${i}-buckets.yaml" aws/composition.yaml tests/functions.yaml --observed-resources "aws/tests/observed/00${i}-buckets.yaml" -x > "aws/00${i}-buckets.yaml"
            dyff between "aws/00${i}-buckets.yaml" "aws/tests/expected/00${i}-buckets.yaml" -s
          done
  # minio_e2e_tests:
  #   runs-on: ubuntu-latest
  #   needs: build_and_publish_configuration_packages
  #   env:
  #     CHAINSAW: /home/runner/.chainsaw/chainsaw
  #     KUBECTL: /usr/bin/kubectl
  #     CROSSPLANE_NAMESPACE: crossplane-system
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Install Uptest CLI
  #       run: |
  #         curl -OL https://github.com/crossplane/uptest/releases/download/v1.4.0/uptest_linux-amd64
  #         chmod +x uptest_linux-amd64
  #         sudo mv uptest_linux-amd64 /usr/local/bin/uptest
  #     - name: Install chainsaw CLI
  #       uses: kyverno/action-install-chainsaw@v0.2.12
  #       with:
  #         release: v0.2.12
  #     - name: Create kind cluster
  #       uses: helm/kind-action@v1
  #     - name: Run e2e tests
  #       run: |
  #         cd minio/
  #         uptest e2e --setup-script tests/e2e.sh examples/buckets.yaml
      # - name: Delete Configuration Package
      #   run: |
      #     echo "${{ github.token }}" | gh auth login --with-token
      #     package_id=$(gh api /orgs/versioneer-tech/packages/container/provider-storage/versions | jq --arg PR_SLUG ${PR_SLUG} -r '.[] | select(.metadata.container.tags==[$PR_SLUG]) | .id')
      #     gh api --method DELETE --silent "/orgs/versioneer-tech/packages/container/provider-storage/versions/${package_id}"
  aws_e2e_tests:
    runs-on: ubuntu-latest
    needs: build_and_publish_configuration_packages
    env:
      CHAINSAW: /home/runner/.chainsaw/chainsaw
      KUBECTL: /usr/bin/kubectl
      CROSSPLANE_NAMESPACE: crossplane-system
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v4
      # - name: Install Uptest CLI
      #   run: |
      #     curl -OL https://github.com/crossplane/uptest/releases/download/v1.4.0/uptest_linux-amd64
      #     chmod +x uptest_linux-amd64
      #     sudo mv uptest_linux-amd64 /usr/local/bin/uptest
      # - name: Install chainsaw CLI
      #   uses: kyverno/action-install-chainsaw@v0.2.12
      #   with:
      #     release: v0.2.12
      # - name: Create kind cluster
      #   uses: helm/kind-action@v1
      # - name: Run e2e tests
      #   run: |
      #     cd aws/
      #     uptest e2e --setup-script tests/e2e.bash examples/buckets.yaml
      - name: Delete Configuration Package
        run: |
          echo "${{ github.token }}" | gh auth login --with-token
          package_id=$(gh api /orgs/versioneer-tech/packages/container/provider-storage/versions | jq --arg PR_SLUG "${PR_SLUG}" -r '.[] | select(.metadata.container.tags | contains(["\($PR_SLUG)-aws"])) | .id')
          echo $package_id
          gh api "/orgs/versioneer-tech/packages/container/provider-storage/versions/${package_id}"
          gh api --method DELETE --silent "/orgs/versioneer-tech/packages/container/provider-storage/versions/${package_id}"
