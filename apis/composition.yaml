apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage
spec:
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XStorage
  mode: Pipeline
  pipeline:
    - step: setup-minio
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- range $i, $bucket := .observed.composite.resource.spec.buckets }}
              {{- if eq $bucket.owner $.observed.composite.resource.spec.claimRef.namespace }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Bucket
            metadata:
              name: {{ $bucket.name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket-{{ $i }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              providerConfigRef:
                name: provider-minio
              {{- end }}
              {{- if $bucket.owner }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Policy
            metadata:
              name: {{ $bucket.owner }}.owner.{{ $bucket.name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: policy-{{ $bucket.owner }}.owner.{{ $bucket.name }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                rawPolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [ "s3:*" ],
                        "Resource": [
                          "arn:aws:s3:::{{ $bucket.name }}",
                          "arn:aws:s3:::{{ $bucket.name }}/*"
                        ]
                      }
                    ]
                  }
              providerConfigRef:
                name: provider-minio
              {{- end }}
              {{- range $j, $rw := $bucket.accessReadWrite }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Policy
            metadata:
              name: {{ $rw }}.readwrite.{{ $bucket.name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: policy-{{ $rw }}.readwrite.{{ $bucket.name }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                rawPolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetBucketLocation",
                          "s3:ListBucket",
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::{{ $bucket.name }}",
                          "arn:aws:s3:::{{ $bucket.name }}/*"
                        ]
                      }
                    ]
                  }
              providerConfigRef:
                name: provider-minio
              {{- end }}
              {{- range $j, $ro := $bucket.accessReadOnly }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Policy
            metadata:
              name: {{ $ro }}.readonly.{{ $bucket.name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: policy-{{ $ro }}.readonly.{{ $bucket.name }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                rawPolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetBucketLocation",
                          "s3:ListBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::{{ $bucket.name }}"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::{{ $bucket.name }}/*"
                        ]
                      }
                    ]
                  }
              providerConfigRef:
                name: provider-minio
              {{- end }}
            {{- end }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: User
            metadata:
              name: {{ .observed.composite.resource.spec.claimRef.namespace }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: user-{{ .observed.composite.resource.spec.claimRef.namespace }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                userName: {{ .observed.composite.resource.spec.claimRef.namespace }}
                policies:
                {{- range $i, $bucket := .observed.composite.resource.spec.buckets }}
                  {{- if has $.observed.composite.resource.spec.claimRef.namespace $bucket.accessReadWrite }}
                  - {{ $.observed.composite.resource.spec.claimRef.namespace }}.readwrite.{{ $bucket.name }}
                  {{- end }}
                  {{- if has $.observed.composite.resource.spec.claimRef.namespace $bucket.accessReadOnly }}
                  - {{ $.observed.composite.resource.spec.claimRef.namespace }}.readonly.{{ $bucket.name }}
                  {{- end }}
                  {{- if eq $bucket.owner $.observed.composite.resource.spec.claimRef.namespace }}
                  - {{ $bucket.owner }}.owner.{{ $bucket.name }}
                  {{- end }}
                {{- end }}
              providerConfigRef:
                name: provider-minio
              writeConnectionSecretToRef:
                name: bucket-{{ .observed.composite.resource.spec.claimRef.namespace }}
                namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}

