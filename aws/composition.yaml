
# Copyright 2025, EOX (https://eox.at) and Versioneer (https://versioneer.at)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage-aws
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: pkg.internal/v1beta1
    kind: Storage
  mode: Pipeline
  pipeline:
    - step: create-buckets
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              region = (spec.get("region") or "eu-central-1").strip()
              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  key = f"bucket-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "s3.aws.m.upbound.io/v1beta1",
                      "kind": "Bucket",
                      "metadata": {
                          "name": bucket,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {"region": region},
                          "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-owner-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import json
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal>").strip()
              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.full.{bucket}"
                  policy_doc = {
                      "Version": "2012-10-17",
                      "Statement": [{
                          "Effect": "Allow",
                          "Action": ["s3:*"],
                          "Resource": [f"arn:aws:s3:::{bucket}", f"arn:aws:s3:::{bucket}/*"]
                      }]
                  }
                  key = f"policy-full-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                      "kind": "Policy",
                      "metadata": {
                          "name": polname,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {"policy": json.dumps(policy_doc, indent=2)},
                          "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-restricted-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import json
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def _policy_for(bucket, perm):
              p = (perm or "").strip().lower()
              if p == "readwrite":
                  stmts = [{
                      "Effect": "Allow",
                      "Action": ["s3:ListBucket","s3:GetObject","s3:PutObject","s3:DeleteObject"],
                      "Resource": [f"arn:aws:s3:::{bucket}", f"arn:aws:s3:::{bucket}/*"]
                  }]
              elif p == "readonly":
                  stmts = [
                      {"Effect":"Allow","Action":["s3:ListBucket"],"Resource":[f"arn:aws:s3:::{bucket}"]},
                      {"Effect":"Allow","Action":["s3:GetObject"],"Resource":[f"arn:aws:s3:::{bucket}/*"]}
                  ]
              elif p == "writeonly":
                  stmts = [
                      {"Effect":"Allow","Action":["s3:ListBucket"],"Resource":[f"arn:aws:s3:::{bucket}"]},
                      {"Effect":"Allow","Action":["s3:PutObject","s3:DeleteObject"],"Resource":[f"arn:aws:s3:::{bucket}/*"]}
                  ]
              else:
                  stmts = []
              return {"Version": "2012-10-17", "Statement": stmts}
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              for g in (spec.get("bucketAccessGrants") or []):
                  bucket  = (g.get("bucketName") or "").strip()
                  grantee = (g.get("grantee") or "").strip()
                  perm    = (g.get("permission") or "").strip()
                  if not bucket or not grantee or not perm:
                      continue
                  policy_doc = _policy_for(bucket, perm)
                  pname = f"{grantee}.restricted.{bucket}"
                  key = f"policy-{grantee}-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                      "kind": "Policy",
                      "metadata": {
                          "name": pname,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {"policy": json.dumps(policy_doc, indent=2)},
                          "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                      }
                  })

    - step: observe-requested-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal>").strip()
              for r in (spec.get("bucketAccessRequests") or []):
                  bucket = (r.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.restricted.{bucket}"
                  key = f"observe-{principal}-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                      "kind": "Object",
                      "metadata": {
                          "name": key,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "managementPolicies": ["Observe"],
                          "forProvider": {
                              "manifest": {
                                  "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                                  "kind": "Policy",
                                  "metadata": {"name": polname, "namespace": ns}
                              }
                          },
                          "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-user
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal>").strip()
              key = f"user-{principal}"
              rsp.desired.resources[key].resource.update({
                  "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                  "kind": "User",
                  "metadata": {
                      "name": principal,
                      "namespace": ns,
                      "annotations": {"crossplane.io/composition-resource-name": key}
                  },
                  "spec": {
                      "forProvider": {},
                      "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                  }
              })

    - step: attach-policies-to-user
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal>").strip()

              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.full.{bucket}"
                  key = f"upa-full-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                      "kind": "UserPolicyAttachment",
                      "metadata": {
                          "name": f"{principal}.full.{bucket}",
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {
                              "userRef": {"name": principal},
                              "policyArnRef": {"name": polname}
                          },
                          "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                      }
                  })

              observed = getattr(req.observed, "resources", {}) or {}
              for r in (spec.get("bucketAccessRequests") or []):
                  bucket = (r.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.restricted.{bucket}"
                  obs_key = f"observe-{principal}-restricted-{bucket}"
                  oc = observed.get(obs_key)
                  exists = False
                  if oc and getattr(oc, "resource", None):
                      od = _to_dict(oc.resource)
                      st = (od.get("status") or {})
                      has_manifest = bool((st.get("atProvider") or {}).get("manifest"))
                      conds = st.get("conditions") or []
                      is_ready = any(c.get("type") == "Ready" and c.get("status") in ("True", True) for c in conds)
                      exists = has_manifest or is_ready
                  if not exists:
                      continue
                  key = f"upa-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                      "kind": "UserPolicyAttachment",
                      "metadata": {
                          "name": f"{principal}.restricted.{bucket}",
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {
                              "userRef": {"name": principal},
                              "policyArnRef": {"name": polname}
                          },
                          "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-user-access-key
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = (meta.get("labels", {}) or {}).get("crossplane.io/claim-namespace") or meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal>").strip()
              key = f"access-key-{principal}"
              rsp.desired.resources[key].resource.update({
                  "apiVersion": "iam.aws.m.upbound.io/v1beta1",
                  "kind": "AccessKey",
                  "metadata": {
                      "name": principal,
                      "namespace": ns,
                      "annotations": {"crossplane.io/composition-resource-name": key}
                  },
                  "spec": {
                      "forProvider": {"userRef": {"name": principal}},
                      "providerConfigRef": {"name": "provider-aws", "kind": "ProviderConfig"},
                      "writeConnectionSecretToRef": {"name": principal}
                  }
              })

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
