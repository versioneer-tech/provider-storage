apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage-minio
  labels:
    provider: minio
spec:
  compositeTypeRef:
    apiVersion: pkg.internal/v1beta1
    kind: Storage
  mode: Pipeline
  pipeline:
    - step: create-buckets
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format

          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))

          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr   = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = meta.get("namespace") or "default"

              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  discoverable = str(bool(b.get("discoverable", False))).lower()
                  key = f"bucket-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                      "kind": "Object",
                      "metadata": {
                          "name": key,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {
                              "manifest": {
                                  "apiVersion": "minio.crossplane.io/v1",
                                  "kind": "Bucket",
                                  "metadata": {
                                      "name": bucket,
                                      "annotations": {"storages.pkg.internal/discoverable": discoverable}
                                  },
                                  "spec": {
                                      "providerConfigRef": {"name": "provider-minio"}
                                  }
                              }
                          },
                          "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-principal-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import json
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format

          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))

          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr   = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal-missing>").strip()

              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.full.{bucket}"
                  key = f"policy-full-{bucket}"
                  raw = json.dumps({
                      "Version": "2012-10-17",
                      "Statement": [{
                          "Effect": "Allow",
                          "Action": ["s3:*"],
                          "Resource": [f"arn:aws:s3:::{bucket}", f"arn:aws:s3:::{bucket}/*"]
                      }]
                  }, indent=2)

                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                      "kind": "Object",
                      "metadata": {
                          "name": key,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {
                              "manifest": {
                                  "apiVersion": "minio.crossplane.io/v1",
                                  "kind": "Policy",
                                  "metadata": {"name": polname},
                                  "spec": {
                                      "forProvider": {"rawPolicy": raw},
                                      "providerConfigRef": {"name": "provider-minio"}
                                  }
                              }
                          },
                          "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-restricted-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import json
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format

          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))

          def _raw_policy(bucket, perm):
              p = (perm or "").strip().lower()
              if p == "readwrite":
                  stmt = [{
                      "Effect": "Allow",
                      "Action": ["s3:GetBucketLocation","s3:ListBucket","s3:GetObject","s3:PutObject","s3:DeleteObject"],
                      "Resource": [f"arn:aws:s3:::{bucket}", f"arn:aws:s3:::{bucket}/*"]
                  }]
              elif p == "readonly":
                  stmt = [
                      {"Effect": "Allow","Action": ["s3:GetBucketLocation","s3:ListBucket"],"Resource": [f"arn:aws:s3:::{bucket}"]},
                      {"Effect": "Allow","Action": ["s3:GetObject"],"Resource": [f"arn:aws:s3:::{bucket}/*"]},
                  ]
              elif p == "writeonly":
                  stmt = [
                      {"Effect": "Allow","Action": ["s3:GetBucketLocation","s3:ListBucket"],"Resource": [f"arn:aws:s3:::{bucket}"]},
                      {"Effect": "Allow","Action": ["s3:PutObject","s3:DeleteObject"],"Resource": [f"arn:aws:s3:::{bucket}/*"]},
                  ]
              elif p == "none":
                  stmt = []
              else:
                  stmt = []
              return json.dumps({"Version": "2012-10-17","Statement": stmt}, indent=2)

          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr   = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = meta.get("namespace") or "default"

              for grant in (spec.get("bucketAccessGrants") or []):
                  bucket  = (grant.get("bucketName") or "").strip()
                  grantee = (grant.get("grantee") or "").strip()
                  perm    = (grant.get("permission") or "").strip()
                  if not bucket or not grantee or not perm:
                      continue

                  raw = _raw_policy(bucket, perm)
                  polname = f"{grantee}.restricted.{bucket}"
                  key = f"policy-{grantee}-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                      "kind": "Object",
                      "metadata": {
                          "name": key,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "forProvider": {
                              "manifest": {
                                  "apiVersion": "minio.crossplane.io/v1",
                                  "kind": "Policy",
                                  "metadata": {"name": polname},
                                  "spec": {
                                      "forProvider": {"rawPolicy": raw},
                                      "providerConfigRef": {"name": "provider-minio"}
                                  }
                              }
                          },
                          "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                      }
                  })

    - step: check-if-requested-policies-exist
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format

          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))

          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr   = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal-missing>").strip()

              for r in (spec.get("bucketAccessRequests") or []):
                  bucket = (r.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  polname = f"{principal}.restricted.{bucket}"
                  key = f"observe-{principal}-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                      "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                      "kind": "Object",
                      "metadata": {
                          "name": key,
                          "namespace": ns,
                          "annotations": {"crossplane.io/composition-resource-name": key}
                      },
                      "spec": {
                          "managementPolicies": ["Observe"],
                          "forProvider": {
                              "manifest": {
                                  "apiVersion": "minio.crossplane.io/v1",
                                  "kind": "Policy",
                                  "metadata": {"name": polname}
                              }
                          },
                          "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                      }
                  })

    - step: create-user-with-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format

          def _to_dict(struct):
              return {} if struct is None else (struct if isinstance(struct, dict) else json_format.MessageToDict(struct, preserving_proto_field_name=True))

          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr   = _to_dict(req.observed.composite.resource)
              meta = xr.get("metadata", {}) or {}
              spec = xr.get("spec", {}) or {}
              ns   = meta.get("namespace") or "default"
              principal = (spec.get("principal") or meta.get("name") or "<principal-missing>").strip()

              policies = []
              for b in (spec.get("buckets") or []):
                  bucket = (b.get("bucketName") or "").strip()
                  if bucket:
                      policies.append(f"{principal}.full.{bucket}")

              observed_resources = getattr(req.observed, "resources", {}) or {}
              for r in (spec.get("bucketAccessRequests") or []):
                  bucket = (r.get("bucketName") or "").strip()
                  if not bucket:
                      continue
                  obs_key = f"observe-{principal}-restricted-{bucket}"
                  oc = observed_resources.get(obs_key)
                  exists = False
                  if oc and getattr(oc, "resource", None):
                      od = _to_dict(oc.resource)
                      st = (od.get("status") or {})
                      has_manifest = bool((st.get("atProvider") or {}).get("manifest"))
                      conds = st.get("conditions") or []
                      is_ready = any(c.get("type") == "Ready" and c.get("status") in ("True", True) for c in conds)
                      exists = has_manifest or is_ready
                  if exists:
                      policies.append(f"{principal}.restricted.{bucket}")

              key = f"user-{principal}"
              rsp.desired.resources[key].resource.update({
                  "apiVersion": "kubernetes.m.crossplane.io/v1alpha1",
                  "kind": "Object",
                  "metadata": {
                      "name": key,
                      "namespace": ns,
                      "annotations": {"crossplane.io/composition-resource-name": key}
                  },
                  "spec": {
                      "forProvider": {
                          "manifest": {
                              "apiVersion": "minio.crossplane.io/v1",
                              "kind": "User",
                              "metadata": {"name": principal},
                              "spec": {
                                  "forProvider": {"userName": principal, "policies": policies},
                                  "providerConfigRef": {"name": "provider-minio"},
                                  "writeConnectionSecretToRef": {"name": principal, "namespace": ns}
                              }
                          }
                      },
                      "providerConfigRef": {"name": "provider-kubernetes", "kind": "ProviderConfig"}
                  }
              })

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
