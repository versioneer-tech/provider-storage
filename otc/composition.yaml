apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage-otc
  labels:
    provider: otc
spec:
  compositeTypeRef:
    apiVersion: pkg.internal/v1beta1
    kind: Storage
  mode: Pipeline
  pipeline:
    - step: create-user
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(x): return {} if x is None else (x if isinstance(x, dict) else json_format.MessageToDict(x, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr=_to_dict(req.observed.composite.resource); meta=xr.get("metadata",{}) or {}; spec=xr.get("spec",{}) or {}
              ns=meta.get("namespace") or "default"; principal=(spec.get("principal") or meta.get("name") or "").strip()
              if not principal: return
              key=f"user-{principal}"
              rsp.desired.resources[key].resource.update({
                "apiVersion":"kubernetes.m.crossplane.io/v1alpha1",
                "kind":"Object",
                "metadata":{"name":key,"namespace":ns,"annotations":{"crossplane.io/composition-resource-name":key}},
                "spec":{
                  "forProvider":{
                    "manifest":{
                      "apiVersion":"identity.opentelekomcloud.crossplane.io/v1alpha1",
                      "kind":"UserV3",
                      "metadata":{"name":principal},
                      "spec":{
                        "forProvider":{"name":principal,"enabled": True},
                        "providerConfigRef":{"name":"provider-otc"}
                      }
                    }
                  },
                  "providerConfigRef":{"name":"provider-kubernetes","kind":"ProviderConfig"}
                }
              })

    - step: create-access-key
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(x): return {} if x is None else (x if isinstance(x, dict) else json_format.MessageToDict(x, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr=_to_dict(req.observed.composite.resource); meta=xr.get("metadata",{}) or {}; spec=xr.get("spec",{}) or {}
              ns=meta.get("namespace") or "default"; principal=(spec.get("principal") or meta.get("name") or "").strip()
              if not principal: return
              observed=getattr(req.observed,"resources",{}) or {}
              oc=observed.get(f"user-{principal}")
              user_id=None
              if oc and getattr(oc,"resource",None):
                  od=_to_dict(oc.resource)
                  man=((od.get("status") or {}).get("atProvider") or {}).get("manifest") or {}
                  user_id=((man.get("status") or {}).get("atProvider") or {}).get("id")
              if not user_id: return
              key=f"access-key-{principal}"
              rsp.desired.resources[key].resource.update({
                "apiVersion":"kubernetes.m.crossplane.io/v1alpha1",
                "kind":"Object",
                "metadata":{"name":key,"namespace":ns,"annotations":{"crossplane.io/composition-resource-name":key}},
                "spec":{
                  "forProvider":{
                    "manifest":{
                      "apiVersion":"identity.opentelekomcloud.crossplane.io/v1alpha1",
                      "kind":"CredentialV3",
                      "metadata":{"name":f"{principal}-aksk"},
                      "spec":{
                        "forProvider":{"type":"AK","userId":user_id},
                        "providerConfigRef":{"name":"provider-otc"},
                        "writeConnectionSecretToRef":{"name":principal,"namespace":ns}
                      }
                    }
                  },
                  "providerConfigRef":{"name":"provider-kubernetes","kind":"ProviderConfig"}
                }
              })

    - step: create-buckets
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(x): return {} if x is None else (x if isinstance(x, dict) else json_format.MessageToDict(x, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr=_to_dict(req.observed.composite.resource); meta=xr.get("metadata",{}) or {}; spec=xr.get("spec",{}) or {}
              ns=meta.get("namespace") or "default"; region=(spec.get("region") or "eu-nl").strip()
              for b in (spec.get("buckets") or []):
                  bucket=(b.get("bucketName") or "").strip()
                  if not bucket: continue
                  key=f"bucket-{bucket}"
                  rsp.desired.resources[key].resource.update({
                    "apiVersion":"kubernetes.m.crossplane.io/v1alpha1",
                    "kind":"Object",
                    "metadata":{"name":key,"namespace":ns,"annotations":{"crossplane.io/composition-resource-name":key}},
                    "spec":{
                      "forProvider":{
                        "manifest":{
                          "apiVersion":"s3.opentelekomcloud.crossplane.io/v1alpha1",
                          "kind":"Bucket",
                          "metadata":{"name":bucket},
                          "spec":{
                            "forProvider":{"bucket":bucket,"region":region},
                            "providerConfigRef":{"name":"provider-otc"}
                          }
                        }
                      },
                      "providerConfigRef":{"name":"provider-kubernetes","kind":"ProviderConfig"}
                    }
                  })

    - step: create-bucketpolicies-from-grants
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import json
          from collections import defaultdict
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(x): return {} if x is None else (x if isinstance(x, dict) else json_format.MessageToDict(x, preserving_proto_field_name=True))
          def _grant_statements(bucket, principal_str, perm):
              p=(perm or "").strip().lower()
              if p=="readwrite":
                  bucket_actions=["s3:ListBucket"]; object_actions=["s3:GetObject","s3:PutObject","s3:DeleteObject"]
              elif p=="readonly":
                  bucket_actions=["s3:ListBucket"]; object_actions=["s3:GetObject"]
              elif p=="writeonly":
                  bucket_actions=["s3:ListBucket"]; object_actions=["s3:PutObject","s3:DeleteObject"]
              else:
                  bucket_actions=[]; object_actions=[]
              stmts=[]
              if bucket_actions:
                  stmts.append({"Effect":"Allow","Action":bucket_actions,"Resource":[f"arn:aws:s3:::{bucket}"],"Principal":{"ID":[principal_str]}})
              if object_actions:
                  stmts.append({"Effect":"Allow","Action":object_actions,"Resource":[f"arn:aws:s3:::{bucket}/*"],"Principal":{"ID":[principal_str]}})
              return stmts
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr=_to_dict(req.observed.composite.resource); meta=xr.get("metadata",{}) or {}; spec=xr.get("spec",{}) or {}
              ns=meta.get("namespace") or "default"
              observed=getattr(req.observed,"resources",{}) or {}

              owner_user = observed.get(f"user-{(spec.get('principal') or meta.get('name') or '').strip()}")
              owner_id = owner_domain = None
              if owner_user and getattr(owner_user,"resource",None):
                  od=_to_dict(owner_user.resource)
                  oman=((od.get("status") or {}).get("atProvider") or {}).get("manifest") or {}
                  ost=(oman.get("status") or {}).get("atProvider") or {}
                  owner_id = ost.get("id"); owner_domain = ost.get("domainId")
              owner_principal = f"domain/{owner_domain}:user/{owner_id}" if owner_id and owner_domain else None

              by_bucket=defaultdict(list)
              for g in (spec.get("bucketAccessGrants") or []):
                  bucket=(g.get("bucketName") or "").strip()
                  principal_str=(g.get("granteePrincipal") or "").strip()
                  perm=(g.get("permission") or "").strip()
                  if bucket and principal_str and perm:
                      by_bucket[bucket].append((principal_str,perm))

              owned_buckets = [ (b.get("bucketName") or "").strip() for b in (spec.get("buckets") or []) if (b.get("bucketName") or "").strip() ]
              for bucket in owned_buckets:
                  if owner_principal:
                      by_bucket[bucket].append((owner_principal,"readwrite"))

              for bucket, items in by_bucket.items():
                  statements=[]
                  for principal_str, perm in items:
                      statements.extend(_grant_statements(bucket, principal_str, perm))
                  policy={"Version":"2012-10-17","Statement":statements}
                  key=f"bucketpolicy-{bucket}"
                  rsp.desired.resources[key].resource.update({
                    "apiVersion":"kubernetes.m.crossplane.io/v1alpha1",
                    "kind":"Object",
                    "metadata":{"name":key,"namespace":ns,"annotations":{"crossplane.io/composition-resource-name":key}},
                    "spec":{
                      "forProvider":{
                        "manifest":{
                          "apiVersion":"s3.opentelekomcloud.crossplane.io/v1alpha1",
                          "kind":"BucketPolicy",
                          "metadata":{"name":f"bucketpolicy-{bucket}"},
                          "spec":{
                            "forProvider":{"bucket":bucket,"policy":json.dumps(policy, indent=2)},
                            "providerConfigRef":{"name":"provider-otc"}
                          }
                        }
                      },
                      "providerConfigRef":{"name":"provider-kubernetes","kind":"ProviderConfig"}
                    }
                  })

    - step: observe-requested-policies
      functionRef:
        name: crossplane-contrib-function-python
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          from crossplane.function.proto.v1 import run_function_pb2 as fnv1
          from google.protobuf import json_format
          def _to_dict(x): return {} if x is None else (x if isinstance(x, dict) else json_format.MessageToDict(x, preserving_proto_field_name=True))
          def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
              xr=_to_dict(req.observed.composite.resource); meta=xr.get("metadata",{}) or {}; spec=xr.get("spec",{}) or {}
              ns=meta.get("namespace") or "default"; principal=(spec.get("principal") or meta.get("name") or "").strip()
              for r in (spec.get("bucketAccessRequests") or []):
                  bucket=(r.get("bucketName") or "").strip()
                  if not bucket: continue
                  key=f"observe-{principal}-restricted-{bucket}"
                  rsp.desired.resources[key].resource.update({
                    "apiVersion":"kubernetes.m.crossplane.io/v1alpha1",
                    "kind":"Object",
                    "metadata":{"name":key,"namespace":ns,"annotations":{"crossplane.io/composition-resource-name":key}},
                    "spec":{
                      "managementPolicies":["Observe"],
                      "forProvider":{
                        "manifest":{
                          "apiVersion":"s3.opentelekomcloud.crossplane.io/v1alpha1",
                          "kind":"BucketPolicy",
                          "metadata":{"name":f"bucketpolicy-{bucket}"}
                        }
                      },
                      "providerConfigRef":{"name":"provider-kubernetes","kind":"ProviderConfig"}
                    }
                  })

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
