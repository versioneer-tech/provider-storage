apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: provider-storage
  labels:
    storage: scaleway
spec:
  compositeTypeRef:
    apiVersion: pkg.internal/v1beta1
    kind: XStorage
  mode: Pipeline
  pipeline:
    - step: create-buckets
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $owner := .observed.composite.resource.spec.owner }}
            {{- range $i, $bucket := .observed.composite.resource.spec.buckets }}
            ---
            apiVersion: object.scaleway.upbound.io/v1alpha1
            kind: Bucket
            metadata:
              name: storage-scaleway-{{ $bucket.bucketName }}-p-s
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket-{{ $owner }}-{{ $bucket.bucketName }}
                xstorages.pkg.internal/discoverable: "{{ printf "%t" $bucket.discoverable }}"
            spec:
              forProvider:
                name: storage-scaleway-{{ $bucket.bucketName }}-p-s
              providerConfigRef:
                name: storage-scaleway
            {{- end }}
    - step: create-application
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $owner := .observed.composite.resource.spec.owner }}
            ---
            apiVersion: iam.scaleway.upbound.io/v1alpha1
            kind: Application
            metadata:
              name: {{ $owner }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: application-{{ $owner }}
            spec:
              forProvider:
                name: {{ $owner }}
              providerConfigRef:
                name: storage-scaleway
    - step: create-iam-policies
      functionRef:
        name: crossplane-contrib-function-python
      requirements:
        requiredResources:
        - requirementName: provider-config-secret
          apiVersion: v1
          kind: Secret
          name: storage-scaleway
          namespace: crossplane-system
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import base64
          import json

          from crossplane.function import request, response

          def compose(req, rsp):
            observed_xr = req.observed.composite.resource

            secret = request.get_required_resource(req, "provider-config-secret")
            credentials = json.loads(base64.b64decode(secret["data"]["credentials"]))
            organization_id = credentials["organization_id"]

            owner = observed_xr["spec"]["owner"]

            rsp.desired.resources[f"iam-policy-{owner}"].resource.update({
              "apiVersion": "iam.scaleway.upbound.io/v1alpha1",
              "kind": "Policy",
              "metadata": {
                "name": f"{owner}",
                "annotations": {
                  "gotemplating.fn.crossplane.io/composition-resource-name": f"iam-policy-{owner}"
                }
              },
              "spec": {
                "forProvider": {
                  "applicationIdRef": {
                    "name": owner
                  },
                  "name": f"object-storage-full-access-{owner}",
                  "rule": [
                    {
                      "organizationId": organization_id,
                      "permissionSetNames": [
                        "ObjectStorageFullAccess"
                      ]
                    }
                  ]
                },
                "providerConfigRef": {
                  "name": "storage-scaleway"
                }
              }
            })
    - step: create-bucket-policies
      functionRef:
        name: crossplane-contrib-function-python
      requirements:
        requiredResources:
        - requirementName: provider-config-secret
          apiVersion: v1
          kind: Secret
          name: storage-scaleway
          namespace: crossplane-system
      input:
        apiVersion: python.fn.crossplane.io/v1beta1
        kind: Script
        script: |
          import base64
          import json

          from crossplane.function import request, response

          def compose(req, rsp):
            observed_xr = req.observed.composite.resource

            secret = request.get_required_resource(req, "provider-config-secret")
            credentials = json.loads(base64.b64decode(secret["data"]["credentials"]))
            user_id = credentials["user_id"]

            spec = observed_xr["spec"]
            
            owner = observed_xr["spec"]["owner"]
            buckets = observed_xr["spec"]["buckets"]
            if "bucketAccessGrants" in spec:
              bucketAccessGrants = spec["bucketAccessGrants"]

            response.require_resources(
              rsp,
              name = "application",
              api_version = "iam.scaleway.upbound.io/v1alpha1",
              kind = "Application",
              match_name = owner
            )

            application = request.get_required_resource(req, "application")

            if not application:
              return

            application_id = application["status"]["atProvider"]["id"]

            for bucket in buckets:
              bucketName = bucket["bucketName"]

              policy = {
                "Version": "2023-04-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "SCW": [
                        f"user_id:{user_id}",
                        f"application_id:{application_id}"
                      ]
                    },
                    "Action": [ "s3:*" ],
                    "Resource": [
                      f"storage-scaleway-{bucketName}-p-s",
                      f"storage-scaleway-{bucketName}-p-s/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "SCW": []
                    },
                    "Action": [
                      "s3:ListBucket",
                      "s3:GetObject",
                      "s3:PutObject",
                      "s3:DeleteObject"
                    ],
                    "Resource": [
                      f"storage-scaleway-{bucketName}-p-s",
                      f"storage-scaleway-{bucketName}-p-s/*"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "SCW": []
                    },
                    "Action": [
                      "s3:ListBucket",
                      "s3:GetObject"
                    ],
                    "Resource": [
                      f"storage-scaleway-{bucketName}-p-s",
                      f"storage-scaleway-{bucketName}-p-s/*"
                    ]
                  }
                ]
              }

              bucket_access_grant_object = [
                grant for grant in bucketAccessGrants
                if grant["bucketName"] == bucketName
              ]


              if bucket_access_grant_object:
                bucket_access_grant = bucket_access_grant_object[0]
                grantees = bucket_access_grant["grantees"]
                for grantee in grantees:
                  response.require_resources(
                    rsp,
                    name = f"application-{grantee}",
                    api_version = "iam.scaleway.upbound.io/v1alpha1",
                    kind = "Application",
                    match_name = grantee
                  )

                  grantee_application = request.get_required_resource(req, f"application-{grantee}")

                  if not grantee_application:
                    break

                  grantee_id = grantee_application["status"]["atProvider"]["id"]

                  if bucket_access_grant["permission"] == "ReadWrite":
                    policy["Statement"][1]["Principal"]["SCW"].append(f"application_id:{grantee_id}")
                  else:
                    policy["Statement"][2]["Principal"]["SCW"].append(f"application_id:{grantee_id}")

              rsp.desired.resources[f"bucket-policy-{bucketName}"].resource.update({
                "apiVersion": "object.scaleway.upbound.io/v1alpha1",
                "kind": "Policy",
                "metadata": {
                  "name": f"{bucketName}",
                  "annotations": {
                    "gotemplating.fn.crossplane.io/composition-resource-name": f"bucket-policy-{bucketName}"
                  }
                },
                "spec": {
                  "forProvider": {
                    "bucket": f"storage-scaleway-{bucketName}-p-s",
                    "policy": json.dumps(policy, indent=2)
                  },
                  "providerConfigRef": {
                    "name": "storage-scaleway"
                  }
                }
              })
    - step: create-application-api-key
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $owner := .observed.composite.resource.spec.owner }}
            {{ $namespace := index .observed.composite.resource.metadata.labels "crossplane.io/claim-namespace" }}
            {{ $applicationObject := get .observed.resources (printf "application-%s" $owner) | default dict }}
            ---
            apiVersion: iam.scaleway.upbound.io/v1alpha1
            kind: ApiKey
            metadata:
              name: {{ $owner }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: api-key-{{ $owner }}
            spec:
              forProvider:
                applicationIdRef:
                  name: {{ $applicationObject.resource.metadata.name }}
              providerConfigRef:
                name: storage-scaleway
              writeConnectionSecretToRef:
                name: {{ $owner }}
                namespace: {{ $namespace }}
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
